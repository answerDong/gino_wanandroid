import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:gino_wanandroid/common/net_api.dart';
import 'package:gino_wanandroid/entity/navi_entity.dart';
import 'package:gino_wanandroid/http/http_utils.dart';
import 'package:gino_wanandroid/res/colors.dart';
import 'package:gino_wanandroid/res/gino_string.dart';


///导航页面
class NaviPage extends StatefulWidget {
  const NaviPage({Key? key}) : super(key: key);

  @override
  State<NaviPage> createState() => _NaviPageState();
}

class _NaviPageState extends State<NaviPage> {
  List<Data?> _datas = [];  //一级分类
  List<Articles?> _articles = []; //二级分类
  int index = 0; //一级分类下表

  @override
  void initState() {
    super.initState();
    getHttp();
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        Expanded(
            flex: 2,
            child: Container(
          color: GinoColors.color_fff,
          child: ListView.builder(itemBuilder: (BuildContext context,int position) {
            return getRow(position);
          },
          itemCount: _datas.length,),
        )),
        Expanded(
            flex: 5,
            child: ListView(
              children: <Widget>[
                Container(
                  //height: double.infinity,
                  alignment: Alignment.topLeft,
                  padding: const EdgeInsets.all(10),
                  color: GinoColors.color_F9F9F9,
                  child: getChip(index), //传入一级分类下标
                ),
              ],
            )),
      ],
    );
  }

  //数据
  void getHttp() async {
    try{
      var response = await HttpUitls.getInstance().get(NewApi.NAVI);
      Map userMap = json.decode(response.toString());
      var naviEntity = Autogenerated.fromJson(userMap);
      //更新绘制
      setState(() {
        _datas.add(naviEntity.data?[0]);
      });
    } catch (e) {
      print(e);
    }
  }

  Widget getRow(int i) {
    Color textColor = Theme.of(context).primaryColor; //字体颜色
    return GestureDetector(
      child: Container(
        alignment: Alignment.center,
        padding: EdgeInsets.symmetric(vertical: 15, horizontal: 10),
        //Container下的color属性会与decoration下的border属性冲突，所以要用decoration下的color属性
        decoration: BoxDecoration(
          color: index == i ? GinoColors.color_F9F9F9 : Colors.white,
          border: Border(
            left: BorderSide(
                width: 5,
                color:
                index == i ? Theme.of(context).primaryColor : Colors.white),
          ),
        ),
        child: Text(
          _datas[i]?.name as String,
          style: TextStyle(
            color: index == i ? textColor : GinoColors.color_666,
            fontWeight: index == i ? FontWeight.w600 : FontWeight.w400,
            fontSize: 16,
          ),
        ),
      ),
      onTap: () {
        setState(() {
          index = i; //记录选中的下标
          textColor = GinoColors.colorPrimary;
        });
      },
    );
  }

  Widget getChip(int i) {
    //更新对应下标数据
    _updateArticles(i);
    return Wrap(
      spacing: 10.0, //两个widget之间横向的间隔
      direction: Axis.horizontal, //方向
      alignment: WrapAlignment.start, //内容排序方式
      children: List<Widget>.generate(
        _articles.length,
            (int index) {
          return ActionChip(
            //标签文字
            label:  Text(
              _articles[index]?.title as String,
              textDirection: TextDirection.rtl,
              style: TextStyle(fontSize: 16, color: GinoColors.color_666),
            ),
            //点击事件
            onPressed: () {
              // Navigator.push(
              //   context,
              //   MaterialPageRoute(
              //     builder: (context) => ArticleDetail(
              //         title: _articles[index].title, url: _articles[index].link),
              //   ),
              // );
            },
            elevation: 3,
            backgroundColor: Colors.grey.shade200,
          );
        },
      ).toList(),
    );
  }

  /// 根据一级分类下标更新二级分类集合
  List<Articles?> _updateArticles(int i) {
    setState(() {
      if(_datas != null && _datas.isNotEmpty) {
        _articles = _datas[i]?.articles as List<Articles>;
      }
    });
    return _articles;
  }
}
